#!/usr/bin/env python3

import argparse
import re

import nexpose
import get_credentials


def main():
    """
    Parse arguments
    """
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-r",
        "--regex",
        help="""Regex to match site names on. Do not delete site names which
        do not match this regex.
        Default is '.*Company_[0-9]+_ProjId_[0-9]+_Instance_[-a-z0-9_]+'
        """,
        action="store",
        default=".*Company_[0-9]+_ProjId_[0-9]+_Instance_[-a-z0-9_]+",
    )
    parser.add_argument(
        "-u",
        "--user",
        help="""User for authentication to Nexpose.
        Default is to pull from environmental variable NEXPOSE_USER.
        If that variable is not set, prompt.
        """,
        action="store",
    )
    parser.add_argument(
        "-p",
        "--password",
        help="""Password for authentication to Nexpose.
        Default is to pull from environmental variable NEXPOSE_PASS.
        If that variable is not set, prompt.
        """,
        action="store",
    )
    parser.add_argument(
        "-b",
        "--baseurl",
        help="""Base url of Nexpose API.
        Default: https://localhost
        """,
        action="store",
        default="https://localhost",
    )
    parser.add_argument(
        "-P",
        "--port",
        help="""Port the Nexpose API runs on.
        Default is 3780
        """,
        action="store",
        default="3780",
    )
    parser.add_argument(
        "-k",
        "--insecure",
        help="""Allow operation to proceed even if connection is insecure.
        Do not use this in production.
        """,
        action="store_false",
        default=True,
        dest="verify",
    )

    args = parser.parse_args()

    user = args.user
    password = args.password
    base_url = ":".join([args.baseurl, args.port])
    verify = args.verify
    regex = args.regex

    if user is None:
        user = get_credentials.user()

    if password is None:
        password = get_credentials.password()

    pages = nexpose.sites(
        base_url=base_url,
        user=user,
        password=password,
        verify=verify,
    )["page"]["totalPages"]
    site_count = 0
    tried = 0
    deleted = 0

    for page in range(pages):
        resources = nexpose.sites(
            base_url=base_url, user=user, password=password, verify=verify, page=page
        )["resources"]
        site_ids = [
            resource["id"]
            for resource in resources
            if re.fullmatch(regex, resource['name'])
        ]
        for site_id in site_ids:
            site_count += 1
            print(f"checking site {site_id}")
            if nexpose.site_id_older_than(site_id=site_id, days=90, base_url=base_url, user=user, password=password, verify=verify):
                tried +=1
                try:
                    print(f"deleting site {site_id}")
                    nexpose.delete_site(site_id=site_id, base_url=base_url, user=user, password=password, verify=verify)
                    print(f"deleted site {site_id}")
                    deleted += 1
                except nexpose.ResponseNotOK as err:
                    print(f"something went wrong with {site_id}: {err}")
    print(f"deleted {deleted} of {tried} tried out of {site_count}")

if __name__ == "__main__":
    main()
